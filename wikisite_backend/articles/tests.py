import pytest
from django.contrib.auth.models import User
from rest_framework import status
from rest_framework.test import APITestCase

from articles.models import Article


@pytest.mark.django_db
class ArticleIndexTests(APITestCase):

    def test_one_article(self):
        """
        Ensure that the articles api returns as expected w/ one article.
        """
        Article.objects.create(name="Test Article", content="This is a test article")

        response = self.client.get("/api/articles/")
        assert response.status_code == status.HTTP_200_OK
        assert len(response.data) == 1

        response_article = response.data[0]
        assert response_article["name"] == "Test Article"
        assert "creation_date" in response_article

        # Content is too long to put in the index view
        assert "content" not in response_article

    def test_order_by_creation(self):
        """
        If there are multiple articles, they should be ordered by creation time.
        """
        Article.objects.create(name="Test Article 1", content="This is a test article")
        Article.objects.create(name="Test Article 2", content="This is a test article")

        response = self.client.get("/api/articles/")
        assert response.status_code == status.HTTP_200_OK
        assert len(response.data) == 2

        # First article should be the one that was created second
        first_user = response.data[0]
        assert first_user["name"] == "Test Article 2"

        second_user = response.data[1]
        assert second_user["name"] == "Test Article 1"


@pytest.mark.django_db
class ArticleViewTest(APITestCase):

    def test_view_article(self):
        """
        Ensure that the article view works as expected.
        """
        Article.objects.create(name="Test Article", content="This is a test article")

        response = self.client.get("/api/articles/1/")
        assert response.status_code == status.HTTP_200_OK

        response_article = response.data
        assert response_article["name"] == "Test Article"
        assert response_article["content"] == "This is a test article"
        assert "creation_date" in response_article


@pytest.mark.django_db
class ArticleCreationTest(APITestCase):

    def setUp(self):
        self.user = User.objects.create_user(
            username='testUser',
            password='@dequatePassword1'
        )
        self.client.force_login(user=self.user)

    def test_create_article(self):
        """
        Test the happy path of creating an article.
        """
        article_data = {"name": "Test Article", "content": "This is a test article"}
        response = self.client.post(
            "/api/articles/", data=article_data, format="json",
        )

        assert response.status_code == status.HTTP_201_CREATED

        # Make sure the article was created in the DB
        article_exists = Article.objects.filter(
            name=article_data["name"],
            content=article_data["content"]
        ).exists()
        assert article_exists

    def test_creation_date_read_only(self):
        """
        Ensure that specifying the creation date of an article is not allowed.
        (it should be autogenerated by the server instead)
        """
        article_data = {
            "name": "Test Article",
            "content": "This is a test article",
            "creation_date": "2018-10-25T02:23:59.962974Z"
        }
        self.client.post(
            "/api/articles/", data=article_data, format="json"
        )

        # Make sure the specified creation date was not used
        # (the datetime should be autoset to the current datetime)
        article = Article.objects.get(name=article_data["name"])
        assert article.creation_date.isoformat() != article_data["creation_date"]

    def test_unauthenticated(self):
        """
        Unauthenticated users should be unable to post articles
        """
        article_data = {"name": "Test Article", "content": "This is a test article"}
        self.client.logout()
        response = self.client.post(
            "/api/articles/", data=article_data, format="json",
        )

        assert response.status_code == status.HTTP_403_FORBIDDEN
